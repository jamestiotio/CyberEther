#version 450
#extension GL_ARB_compute_shader : enable
#extension GL_ARB_separate_shader_objects : enable

layout(set = 0, binding = 0) uniform ShaderUniforms {
    mat4 transform;
    vec2 thickness;
    float zoom;
    uint numberOfPoints;
} uniforms;

layout(std430, set = 0, binding = 1) readonly buffer A {
    vec2 points[];
};

layout(std430, set = 0, binding = 2) writeonly buffer B {
    vec4 line[];
};

vec2 normal(vec2 p) {
    return p / max(length(p), 1e-6);
}

vec2 perpendicular(vec2 p) {
    return vec2(-p.y, p.x);
}

void main() {
    uint i = gl_GlobalInvocationID.x;

    if (i >= uniforms.numberOfPoints - 1) {
        return;
    }

    vec2 point = points[i];
    vec2 nextPoint = points[i + 1];

    point.x *= uniforms.zoom;
    nextPoint.x *= uniforms.zoom;

    vec2 dir = normal(nextPoint - point);
    vec2 offset = perpendicular(dir) * uniforms.thickness;

    line[(i * 4) + 0] = vec4(point - offset, -dir);
    line[(i * 4) + 1] = vec4(point + offset, dir);
    line[(i * 4) + 2] = vec4(nextPoint - offset, -dir);
    line[(i * 4) + 3] = vec4(nextPoint + offset, dir);
}
